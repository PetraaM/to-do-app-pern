[{"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\index.js":"1","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\App.js":"2","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\ListHeader.js":"3","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\Auth.js":"4","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\ListItem.js":"5","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\Modal.js":"6","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\ProgressBar.js":"7","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\TickIcon.js":"8","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\index.js":"9","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\App.js":"10","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\ListItem.js":"11","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\ListHeader.js":"12","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\Auth.js":"13","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\TickIcon.js":"14","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\Modal.js":"15","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\ProgressBar.js":"16"},{"size":265,"mtime":1711210750944,"results":"17","hashOfConfig":"18"},{"size":1441,"mtime":1711214922737,"results":"19","hashOfConfig":"18"},{"size":923,"mtime":1711210750943,"results":"20","hashOfConfig":"18"},{"size":3671,"mtime":1711214924858,"results":"21","hashOfConfig":"18"},{"size":1465,"mtime":1711210750943,"results":"22","hashOfConfig":"18"},{"size":3192,"mtime":1711210750943,"results":"23","hashOfConfig":"18"},{"size":500,"mtime":1711210750943,"results":"24","hashOfConfig":"18"},{"size":454,"mtime":1711210750943,"results":"25","hashOfConfig":"18"},{"size":265,"mtime":1711210750944,"results":"26","hashOfConfig":"27"},{"size":1387,"mtime":1711360850195,"results":"28","hashOfConfig":"27"},{"size":1466,"mtime":1711364874463,"results":"29","hashOfConfig":"27"},{"size":952,"mtime":1711364874455,"results":"30","hashOfConfig":"27"},{"size":4238,"mtime":1711365274699,"results":"31","hashOfConfig":"27"},{"size":454,"mtime":1711210750943,"results":"32","hashOfConfig":"27"},{"size":3188,"mtime":1711360850227,"results":"33","hashOfConfig":"27"},{"size":470,"mtime":1711360850239,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"x8xr1l",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1blwd4w",{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"67"},"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\index.js",[],[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\App.js",["92","93","94"],[],"import \"react-toastify/dist/ReactToastify.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ListHeader from \"./components/ListHeader\";\r\nimport ListItem from \"./components/ListItem\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Auth from \"./components/Auth\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nfunction App() {\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const authToken = cookies.AuthToken;\r\n  const user = cookies.User;\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}todos/users/${user.id}`\r\n      );\r\n      const res = await response.json();\r\n\r\n      setTasks(res.data.todos);\r\n    } catch (error) { }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const sortedTasks = tasks?.sort(\r\n    (a, b) => new Date(b.date) - new Date(a.date)\r\n  );\r\n  return (\r\n    <div className=\"container\" style={{ textAlign: \"center\" }}>\r\n      <ToastContainer />\r\n      {authToken ? (\r\n        <div className=\"app\">\r\n          <ListHeader listName=\"Holiday tick list\" getData={getData} />\r\n          {sortedTasks?.map((task) => (\r\n            <ListItem key={task.id} task={task} getData={getData} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <Auth />\r\n      )}\r\n      <p className=\"copyright\">Â© Melos</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\ListHeader.js",["95"],[],"import React, { useState } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nconst ListHeader = ({ listName, getData }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n\r\n  const signOut = () => {\r\n    removeCookie(\"User\");\r\n    removeCookie(\"AuthToken\");\r\n  };\r\n  return (\r\n    <div className=\"list-header\">\r\n      <h1>{listName}</h1>\r\n      <div className=\"button-container\">\r\n        <button className=\"create\" onClick={() => setShowModal(true)}>\r\n          ADD NEW\r\n        </button>\r\n        <button className=\"signout\" onClick={signOut}>\r\n          SIGN OUT {cookies && `(${cookies?.User.username})`}\r\n        </button>\r\n      </div>\r\n      {showModal && (\r\n        <Modal mode={\"create\"} setShowModal={setShowModal} getData={getData} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListHeader;\r\n","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\Auth.js",["96","97","98"],[],"import React, { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nconst Auth = () => {\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [username, setUsername] = useState(null);\r\n  const [password, setPassword] = useState(null);\r\n  const [confirmPassword, setConfirmPassword] = useState(null);\r\n\r\n  const viewLogin = (status) => {\r\n    setError(null);\r\n    setIsLogin(status);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (username === null || username.trim().length === 0) {\r\n      return setError(\"Username is required\");\r\n    } else if (password === null || password.trim().length === 0) {\r\n      return setError(\"Password is required\");\r\n    } else if (\r\n      !isLogin &&\r\n      (confirmPassword === null || confirmPassword.trim().length === 0)\r\n    ) {\r\n      return setError(\"Confirm password\");\r\n    } else if (!isLogin && password !== confirmPassword) {\r\n      return setError(\"Invalid password confirmation\");\r\n    } else {\r\n      setError(null);\r\n      const endpoint = isLogin ? \"login\" : \"signup\";\r\n      try {\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_API_BASE_URL}auth/${endpoint}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-type\": \"application/json\" },\r\n            body: JSON.stringify({ username, password }),\r\n          }\r\n        );\r\n        const res = await response.json();\r\n        if (response.status === 200) {\r\n          setCookie(\"User\", res.user);\r\n          setCookie(\"AuthToken\", res.token);\r\n        } else setError(res.message);\r\n      } catch (error) {\r\n        setError(\"Something went wrong\");\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"auth-container\">\r\n      <div className=\"auth-container-box\">\r\n        <form method=\"POST\">\r\n          <h2 style={{ textAlign: \"center\" }}>\r\n            {isLogin ? \"Login to Todo App\" : \"Signup to Todo App\"}\r\n          </h2>\r\n          {error && (\r\n            <div\r\n              style={{\r\n                backgroundColor: \"rgba(255,0, 0,0.2)\",\r\n                paddingInline: 20,\r\n                paddingBlock: 5,\r\n                borderRadius: 5,\r\n              }}\r\n            >\r\n              {error}\r\n            </div>\r\n          )}\r\n          <input\r\n            placeholder=\"Username\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          {!isLogin && (\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Confirm Password\"\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            />\r\n          )}\r\n          <input type=\"submit\" className=\"create\" onClick={handleSubmit} />\r\n        </form>\r\n\r\n        <div className=\"auth-options\">\r\n          <button\r\n            onClick={() => viewLogin(false)}\r\n            style={{\r\n              backgroundColor: !isLogin\r\n                ? \"rgb(255,255,255)\"\r\n                : \"rgb(188,188,188)\",\r\n            }}\r\n          >\r\n            Sign Up\r\n          </button>\r\n          <button\r\n            onClick={() => viewLogin(true)}\r\n            style={{\r\n              backgroundColor: isLogin\r\n                ? \"rgb(255,255,255)\"\r\n                : \"rgb(188,188,188)\",\r\n            }}\r\n          >\r\n            Login\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\ListItem.js",[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\Modal.js",["99","100"],[],"import React, { useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Modal = ({ mode, setShowModal, getData, task }) => {\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const editMode = mode === \"edit\" ? true : false;\r\n  const [data, setData] = useState({\r\n    user_id: editMode ? task.user_id : cookies.User.id,\r\n    title: editMode ? task.title : null,\r\n    progress: editMode ? task.progress : 50,\r\n    data: editMode ? task.date : new Date(),\r\n  });\r\n\r\n  const postData = async (e) => {\r\n    e.preventDefault();\r\n    if (data.title === null || data.title?.trim().length === 0) {\r\n      return toast.error(\"Task is required\");\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}/todos`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      if (response.status === 201) {\r\n        setShowModal(false);\r\n        getData();\r\n        toast.success(\"Todo saved\");\r\n      } else toast.error(\"Failed to update todo\");\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const editData = async (e) => {\r\n    e.preventDefault();\r\n    if (data.title === null || data.title?.trim().length === 0) {\r\n      return toast.error(\"Task is required\");\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}/todos/${task.id}`,\r\n        {\r\n          method: \"PATCH\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      if (response.status === 200) {\r\n        setShowModal(false);\r\n        getData();\r\n        toast.success(\"Todo updated\");\r\n      } else toast.error(\"Failed to update todo\");\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData((data) => ({ ...data, [name]: value }));\r\n  };\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"modal\">\r\n        <div className=\"form-title-container\">\r\n          <h3>Lets's {mode} you task</h3>\r\n          <button onClick={() => setShowModal(false)}>X</button>\r\n        </div>\r\n\r\n        <form method=\"POST\">\r\n          <input\r\n            required\r\n            maxLength={30}\r\n            placeholder=\"Write your task here\"\r\n            name=\"title\"\r\n            value={data.title}\r\n            onChange={handleChange}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"range\">Drag to select your current progress</label>\r\n          <input\r\n            required\r\n            type=\"range\"\r\n            id=\"range\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            name=\"progress\"\r\n            value={data.progress}\r\n            onChange={handleChange}\r\n          />\r\n          <input\r\n            className={mode}\r\n            type=\"submit\"\r\n            value=\"save\"\r\n            onClick={editMode ? editData : postData}\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\ProgressBar.js",[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\PERN-Todo-App-with-Authentication\\client\\src\\components\\TickIcon.js",[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\index.js",[],[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\App.js",["101","102","103"],[],"import \"react-toastify/dist/ReactToastify.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ListHeader from \"./components/ListHeader\";\r\nimport ListItem from \"./components/ListItem\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Auth from \"./components/Auth\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nfunction App() {\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const authToken = cookies.AuthToken;\r\n  const user = cookies.User;\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}todos/users/${user.id}`\r\n      );\r\n      const res = await response.json();\r\n\r\n      setTasks(res.data.todos);\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const sortedTasks = tasks?.sort(\r\n    (a, b) => new Date(b.date) - new Date(a.date)\r\n  );\r\n  return (\r\n    <div className=\"container\" style={{ textAlign: \"center\" }}>\r\n      <ToastContainer />\r\n      {authToken ? (\r\n        <div className=\"app\">\r\n          <ListHeader listName=\"TaskZilla\" getData={getData} />\r\n          {sortedTasks?.map((task) => (\r\n            <ListItem key={task.id} task={task} getData={getData} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <Auth />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\ListItem.js",[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\ListHeader.js",["104"],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\Auth.js",["105","106","107"],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\TickIcon.js",[],[],"C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\Modal.js",["108","109"],[],"import React, { useState } from \"react\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Modal = ({ mode, setShowModal, getData, task }) => {\r\n  const [cookies, setCookie, removeCookie] = useCookies(null);\r\n  const editMode = mode === \"edit\" ? true : false;\r\n  const [data, setData] = useState({\r\n    user_id: editMode ? task.user_id : cookies.User.id,\r\n    title: editMode ? task.title : \"\",\r\n    progress: editMode ? task.progress : 50,\r\n    data: editMode ? task.date : new Date(),\r\n  });\r\n\r\n  const postData = async (e) => {\r\n    e.preventDefault();\r\n    if (data.title === null || data.title?.trim().length === 0) {\r\n      return toast.error(\"Task is required\");\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}todos`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      if (response.status === 201) {\r\n        setShowModal(false);\r\n        getData();\r\n        toast.success(\"Todo saved\");\r\n      } else toast.error(\"Failed to update todo\");\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const editData = async (e) => {\r\n    e.preventDefault();\r\n    if (data.title === null || data.title?.trim().length === 0) {\r\n      return toast.error(\"Task is required\");\r\n    }\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_API_BASE_URL}todos/${task.id}`,\r\n        {\r\n          method: \"PATCH\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      if (response.status === 200) {\r\n        setShowModal(false);\r\n        getData();\r\n        toast.success(\"Todo updated\");\r\n      } else toast.error(\"Failed to update todo\");\r\n    } catch (error) {\r\n      toast.error(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData((data) => ({ ...data, [name]: value }));\r\n  };\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"modal\">\r\n        <div className=\"form-title-container\">\r\n          <h3>Lets's {mode} you task</h3>\r\n          <button onClick={() => setShowModal(false)}>X</button>\r\n        </div>\r\n\r\n        <form method=\"POST\">\r\n          <input\r\n            required\r\n            maxLength={30}\r\n            placeholder=\"Write your task here\"\r\n            name=\"title\"\r\n            value={data.title}\r\n            onChange={handleChange}\r\n          />\r\n          <br />\r\n          <label htmlFor=\"range\">Drag to select your current progress</label>\r\n          <input\r\n            required\r\n            type=\"range\"\r\n            id=\"range\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            name=\"progress\"\r\n            value={data.progress}\r\n            onChange={handleChange}\r\n          />\r\n          <input\r\n            className={mode}\r\n            type=\"submit\"\r\n            value=\"save\"\r\n            onClick={editMode ? editData : postData}\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","C:\\Users\\pferc\\OneDrive\\Skrivbord\\git\\to-do-app-pern\\client\\src\\components\\ProgressBar.js",["110"],[],"import React from \"react\";\r\n\r\nconst ProgressBar = ({ progress }) => {\r\n  const colors = [\r\n    \"rgb(255,214,161)\",\r\n    \"rgb(255,175,163)\",\r\n    \"rgb(108,115,148)\",\r\n    \"rgb(141,181,145)\",\r\n  ];\r\n  const randomColor = colors[Math.floor(Math.random() * colors.length)];\r\n  return (\r\n    <div className=\"outer-bar\">\r\n      <div\r\n        className=\"inner-bar\"\r\n        style={{ width: `${progress}%` }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n",{"ruleId":"111","severity":1,"message":"112","line":10,"column":19,"nodeType":"113","messageId":"114","endLine":10,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":10,"column":30,"nodeType":"113","messageId":"114","endLine":10,"endColumn":42},{"ruleId":"116","severity":1,"message":"117","line":28,"column":6,"nodeType":"118","endLine":28,"endColumn":8,"suggestions":"119"},{"ruleId":"111","severity":1,"message":"112","line":7,"column":19,"nodeType":"113","messageId":"114","endLine":7,"endColumn":28},{"ruleId":"111","severity":1,"message":"120","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":15},{"ruleId":"111","severity":1,"message":"121","line":6,"column":10,"nodeType":"113","messageId":"114","endLine":6,"endColumn":17},{"ruleId":"111","severity":1,"message":"115","line":6,"column":30,"nodeType":"113","messageId":"114","endLine":6,"endColumn":42},{"ruleId":"111","severity":1,"message":"112","line":6,"column":19,"nodeType":"113","messageId":"114","endLine":6,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":6,"column":30,"nodeType":"113","messageId":"114","endLine":6,"endColumn":42},{"ruleId":"111","severity":1,"message":"112","line":10,"column":19,"nodeType":"113","messageId":"114","endLine":10,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":10,"column":30,"nodeType":"113","messageId":"114","endLine":10,"endColumn":42},{"ruleId":"116","severity":1,"message":"117","line":28,"column":6,"nodeType":"118","endLine":28,"endColumn":8,"suggestions":"122"},{"ruleId":"111","severity":1,"message":"112","line":7,"column":19,"nodeType":"113","messageId":"114","endLine":7,"endColumn":28},{"ruleId":"111","severity":1,"message":"120","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":15},{"ruleId":"111","severity":1,"message":"121","line":6,"column":10,"nodeType":"113","messageId":"114","endLine":6,"endColumn":17},{"ruleId":"111","severity":1,"message":"115","line":6,"column":30,"nodeType":"113","messageId":"114","endLine":6,"endColumn":42},{"ruleId":"111","severity":1,"message":"112","line":6,"column":19,"nodeType":"113","messageId":"114","endLine":6,"endColumn":28},{"ruleId":"111","severity":1,"message":"115","line":6,"column":30,"nodeType":"113","messageId":"114","endLine":6,"endColumn":42},{"ruleId":"111","severity":1,"message":"123","line":10,"column":9,"nodeType":"113","messageId":"114","endLine":10,"endColumn":20},"no-unused-vars","'setCookie' is assigned a value but never used.","Identifier","unusedVar","'removeCookie' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["124"],"'toast' is defined but never used.","'cookies' is assigned a value but never used.",["125"],"'randomColor' is assigned a value but never used.",{"desc":"126","fix":"127"},{"desc":"126","fix":"128"},"Update the dependencies array to be: [getData]",{"range":"129","text":"130"},{"range":"131","text":"130"},[839,841],"[getData]",[838,840]]